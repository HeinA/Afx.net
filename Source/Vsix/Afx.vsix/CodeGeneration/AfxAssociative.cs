// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Afx.vsix.CodeGeneration
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\AfxAssociative.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class AfxAssociative : AfxAssociativeBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 11 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\AfxAssociative.tt"
this.Template_AfxAssociative_Render(this.ns, this.name, this.baseClass, owner, reference, hasDataContract, isPersistent);
            
            #line default
            #line hidden
            this.Write("  ");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 1 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
 
void Template_AfxAssociative_Render(string ns, string name, string baseClass, string owner, string reference, bool hasDataContract, bool isPersistent)
{			

        
        #line default
        #line hidden
        
        #line 4 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write("using Afx.ObjectModel;");

        
        #line default
        #line hidden
        
        #line 4 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(isPersistent ? "\r\nusing Afx.ObjectModel.Description.Data;" : string.Empty));

        
        #line default
        #line hidden
        
        #line 4 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(" \r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;");

        
        #line default
        #line hidden
        
        #line 7 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(hasDataContract ? "\r\nusing System.Runtime.Serialization;" : string.Empty));

        
        #line default
        #line hidden
        
        #line 7 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write("\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ");

        
        #line default
        #line hidden
        
        #line 11 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(ns));

        
        #line default
        #line hidden
        
        #line 11 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write("\r\n{");

        
        #line default
        #line hidden
        
        #line 12 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(hasDataContract ? "\r\n\t[DataContract(Namespace = Constants.WcfNamespace, IsReference = true)]" : string.Empty));

        
        #line default
        #line hidden
        
        #line 12 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(isPersistent ? "\r\n\t[PersistentObject]" : string.Empty));

        
        #line default
        #line hidden
        
        #line 12 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write("  \r\n  public class ");

        
        #line default
        #line hidden
        
        #line 13 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(name));

        
        #line default
        #line hidden
        
        #line 13 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(" : ");

        
        #line default
        #line hidden
        
        #line 13 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(baseClass == null ? string.Format("AssociativeObject<{0}, {1}>", owner, reference) : baseClass));

        
        #line default
        #line hidden
        
        #line 13 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
this.Write("\r\n  {\r\n  }\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 17 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\.\Business\AfxAssociative.ttinclude"
}
        
        #line default
        #line hidden
        
        #line 1 "C:\Dev\Afx.net v2\Source\Vsix\Afx.vsix\CodeGeneration\AfxAssociative.tt"

private string _nsField;

/// <summary>
/// Access the ns parameter of the template.
/// </summary>
private string ns
{
    get
    {
        return this._nsField;
    }
}

private string _nameField;

/// <summary>
/// Access the name parameter of the template.
/// </summary>
private string name
{
    get
    {
        return this._nameField;
    }
}

private string _baseClassField;

/// <summary>
/// Access the baseClass parameter of the template.
/// </summary>
private string baseClass
{
    get
    {
        return this._baseClassField;
    }
}

private string _ownerField;

/// <summary>
/// Access the owner parameter of the template.
/// </summary>
private string owner
{
    get
    {
        return this._ownerField;
    }
}

private string _referenceField;

/// <summary>
/// Access the reference parameter of the template.
/// </summary>
private string reference
{
    get
    {
        return this._referenceField;
    }
}

private bool _hasDataContractField;

/// <summary>
/// Access the hasDataContract parameter of the template.
/// </summary>
private bool hasDataContract
{
    get
    {
        return this._hasDataContractField;
    }
}

private bool _isPersistentField;

/// <summary>
/// Access the isPersistent parameter of the template.
/// </summary>
private bool isPersistent
{
    get
    {
        return this._isPersistentField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool nsValueAcquired = false;
if (this.Session.ContainsKey("ns"))
{
    this._nsField = ((string)(this.Session["ns"]));
    nsValueAcquired = true;
}
if ((nsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "ns");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._nsField = ((string)(tc.ConvertFrom(parameterValue)));
            nsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'ns\' did not match the type of the data" +
                    " passed to the template.");
        }
    }
}
if ((nsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ns");
    if ((data != null))
    {
        this._nsField = ((string)(data));
    }
}
bool nameValueAcquired = false;
if (this.Session.ContainsKey("name"))
{
    this._nameField = ((string)(this.Session["name"]));
    nameValueAcquired = true;
}
if ((nameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "name");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._nameField = ((string)(tc.ConvertFrom(parameterValue)));
            nameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'name\' did not match the type of the da" +
                    "ta passed to the template.");
        }
    }
}
if ((nameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("name");
    if ((data != null))
    {
        this._nameField = ((string)(data));
    }
}
bool baseClassValueAcquired = false;
if (this.Session.ContainsKey("baseClass"))
{
    this._baseClassField = ((string)(this.Session["baseClass"]));
    baseClassValueAcquired = true;
}
if ((baseClassValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "baseClass");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._baseClassField = ((string)(tc.ConvertFrom(parameterValue)));
            baseClassValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'baseClass\' did not match the type of t" +
                    "he data passed to the template.");
        }
    }
}
if ((baseClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("baseClass");
    if ((data != null))
    {
        this._baseClassField = ((string)(data));
    }
}
bool ownerValueAcquired = false;
if (this.Session.ContainsKey("owner"))
{
    this._ownerField = ((string)(this.Session["owner"]));
    ownerValueAcquired = true;
}
if ((ownerValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "owner");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._ownerField = ((string)(tc.ConvertFrom(parameterValue)));
            ownerValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'owner\' did not match the type of the d" +
                    "ata passed to the template.");
        }
    }
}
if ((ownerValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("owner");
    if ((data != null))
    {
        this._ownerField = ((string)(data));
    }
}
bool referenceValueAcquired = false;
if (this.Session.ContainsKey("reference"))
{
    this._referenceField = ((string)(this.Session["reference"]));
    referenceValueAcquired = true;
}
if ((referenceValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "reference");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._referenceField = ((string)(tc.ConvertFrom(parameterValue)));
            referenceValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'reference\' did not match the type of t" +
                    "he data passed to the template.");
        }
    }
}
if ((referenceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("reference");
    if ((data != null))
    {
        this._referenceField = ((string)(data));
    }
}
bool hasDataContractValueAcquired = false;
if (this.Session.ContainsKey("hasDataContract"))
{
    this._hasDataContractField = ((bool)(this.Session["hasDataContract"]));
    hasDataContractValueAcquired = true;
}
if ((hasDataContractValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "hasDataContract");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._hasDataContractField = ((bool)(tc.ConvertFrom(parameterValue)));
            hasDataContractValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'hasDataContract\' did not match the ty" +
                    "pe of the data passed to the template.");
        }
    }
}
if ((hasDataContractValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("hasDataContract");
    if ((data != null))
    {
        this._hasDataContractField = ((bool)(data));
    }
}
bool isPersistentValueAcquired = false;
if (this.Session.ContainsKey("isPersistent"))
{
    this._isPersistentField = ((bool)(this.Session["isPersistent"]));
    isPersistentValueAcquired = true;
}
if ((isPersistentValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "isPersistent");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(bool));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._isPersistentField = ((bool)(tc.ConvertFrom(parameterValue)));
            isPersistentValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Boolean\' of the parameter \'isPersistent\' did not match the type " +
                    "of the data passed to the template.");
        }
    }
}
if ((isPersistentValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("isPersistent");
    if ((data != null))
    {
        this._isPersistentField = ((bool)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class AfxAssociativeBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
